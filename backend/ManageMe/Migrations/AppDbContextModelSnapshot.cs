// <auto-generated />
using System;
using ManageMe.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManageMe.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ManageMe.Database.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("UniqueEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniqueEntityId")
                        .IsUnique();

                    b.ToTable("Features");
                });

            modelBuilder.Entity("ManageMe.Database.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpectedTime")
                        .HasColumnType("int");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("UniqueEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("UniqueEntityId")
                        .IsUnique();

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ManageMe.Database.Models.UniqueEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("UniqueEntities");
                });

            modelBuilder.Entity("ManageMe.Database.Models.Feature", b =>
                {
                    b.HasOne("ManageMe.Database.Models.UniqueEntity", null)
                        .WithOne("Feature")
                        .HasForeignKey("ManageMe.Database.Models.Feature", "UniqueEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManageMe.Database.Models.Task", b =>
                {
                    b.HasOne("ManageMe.Database.Models.Feature", null)
                        .WithMany("Tasks")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ManageMe.Database.Models.UniqueEntity", null)
                        .WithOne("Task")
                        .HasForeignKey("ManageMe.Database.Models.Task", "UniqueEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManageMe.Database.Models.Feature", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ManageMe.Database.Models.UniqueEntity", b =>
                {
                    b.Navigation("Feature");

                    b.Navigation("Task");
                });
#pragma warning restore 612, 618
        }
    }
}
